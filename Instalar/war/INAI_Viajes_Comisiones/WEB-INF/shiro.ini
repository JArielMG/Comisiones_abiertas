#
# Copyright (c) 2013 Les Hazlewood and contributors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# INI configuration is very powerful and flexible, while still remaining succinct.
# Please http://shiro.apache.org/configuration.html and
# http://shiro.apache.org/web.html for more.

[main]

#shiro.loginUrl = /login.jsp
authc.loginUrl = /login.jsp
authc.successUrl  = /index.jsp
logout.redirectUrl = /login.jsp

sessionManager = org.apache.shiro.web.session.mgt.DefaultWebSessionManager
# configure properties (like session timeout) here if desired

# Own Realm
jdbcRealm = mx.org.inai.viajesclaros.admin.security.CustomShiroRealm

# Sha256
sha256Matcher = org.apache.shiro.authc.credential.Sha256CredentialsMatcher
# base64 encoding, not hex in this example:
sha256Matcher.storedCredentialsHexEncoded = false
sha256Matcher.hashIterations = 1024
 
jdbcRealm.credentialsMatcher = $sha256Matcher

# User Query
# default is "select password from users where username = ?"
jdbcRealm.authenticationQuery = SELECT contrasena FROM viajes_claros.usuarios WHERE usuario = ?

# permissions
#jdbcRealm.permissionsLookupEnabled = true
#jdbcRealm.userRolesQuery = select roleName from UserRole where email = ?

# Connection
ds = org.apache.shiro.jndi.JndiObjectFactory   
ds.requiredType = javax.sql.DataSource 
ds.resourceName = java:comp/env/INAI_Viajes_DS

# JDBC realm config  
#jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm  
#jdbcRealm.permissionsLookupEnabled = true 
jdbcRealm.dataSource = $ds

authc.usernameParam = usuario
authc.passwordParam = contrasena
authc.failureKeyAttribute = shiroLoginFailure
 
# Use Built-in Chache Manager
builtInCacheManager = org.apache.shiro.cache.MemoryConstrainedCacheManager
securityManager.cacheManager = $builtInCacheManager
 
securityManager.realms = $jdbcRealm

# Use the configured native session manager:
securityManager.sessionManager = $sessionManager

# Let's use some in-memory caching to reduce the number of runtime lookups against Stormpath.  A real
# application might want to use a more robust caching solution (e.g. ehcache or a distributed cache).  When using such
# caches, be aware of your cache TTL settings: too high a TTL and the cache won't reflect any potential
# changes in Stormpath fast enough.  Too low and the cache could evict too often, reducing performance.
# cacheManager = org.apache.shiro.cache.MemoryConstrainedCacheManager
# securityManager.cacheManager = $cacheManager

[urls]
/=authc
/index.jsp = authc
/areaAction/** = authc
/categoryAction/** = authc
/carga/** = authc
/ciudadAction/** = authc
/dependenciaAction/** = authc
/estadoAction/** = authc
/formularioAction/** = authc
/grupoAprobacionAction/** = authc
/ingresaInfoAction/** = authc
/jerarquiaAction/** = authc
/miembroAction/** = authc
/notificacionAction/** = authc
/paisAction/** = authc
/personAction/** = authc
/posicionAction/** = authc
/procesosAction/** = authc
/userAction/** = authc
/login.jsp = anon
/logout = logout